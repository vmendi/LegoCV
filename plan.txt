- Es mejor hacer un resize (BICUBIC) antes de proceso la imagen?
- Copiar DB
- Cuantas de cada. Ordenar por mas frecuentes.
- Busca models muy alejados entre si.
- Numero de moldes por pieza.
- Escoger pagina [0.80, 1.50]
- Pedir piezas de esas paginas.
- Botón "Take picture" aparece después de una pesada.
- Soporte en disco (o en DB?) para grabar todas las pictures per brick.

- Imprimir o construir algún tipo de dibujo de calibrado.
	- Calibrar, probar.

- Probar cámara lateral barata.
	- Si funciona, añadir a sesión de fotos.
	- Lateral stereoscopic

- Fijar todos los componentes para que sea repetible.
	- Fijar la tapa de la backlight
	- Fijar el plafón a la estructura base.
	- Comprar barras para dar estructura por abajo
	- Pensar manera de hacer "suelo".
	- Fijar backlight y la base.


- Material menos reflectante para el top de la lightbox

- Hacer fotos de todas esas piezas.
	- Foto con backlighting.
	- Foto con top lighting.

.... desarrollar el diferenciador post-peso.
- Bounding box + circle detector
- SIFT. Entender como se hace el matching una vez que se tienen kp & desc
- Hass cascade. Es aplicable?
- Momentos. Investigar.
- CV_RETR_CCOMP calculando contours para tener at the top level la parte interna
	- Los contours internos pueden ser importantes porque descubren formas de agujeros.
- MSER. Puede devolver incluso el numero de holes.
- Fourier descriptors

Feature vector:
Width | Height | Number of holes | Diff in number of holes | Number of lines | Diff in number of lines
| Hu Moment 01 ... N | Similarity to other 01 ... N

- Write an ad-hoc decision tree
- edges en similarity es solo una imagen de la silueta externa (contraste contra el fondo)
- Obtener de los edges externos el numero de circulos (Number of external holes)
- Obtener otros edges internos a la pieza para hacer numero de circulos (number of internal holes)
- Curvature of external edges could be interesting.


De http://scikit-image.org/docs/dev/api/skimage.feature.html:
- match_template usa FFT convolution para encontrar la template. Probar.
- skimage.feature.greycomatrix(image, ...[, ...])	Calculate the grey-level co-occurrence matrix.
  skimage.feature.greycoprops(P[, prop])	Calculate texture properties of a GLCM.
  (Probar como alternativa a Local Binary Patterns)

De http://scikit-image.org/docs/dev/api/skimage.measure.html
- compare_ssim
    KK. Solo sirve para medir la diferencia entre una imagen fuente y otra comprimida (calidad de broadcast...)




